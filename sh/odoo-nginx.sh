#!/usr/bin/env bash
# odoo-nginx.sh â€” Create an Nginx server block for Odoo (reverse-proxy)
# Usage: ./odoo-nginx.sh <domain> <http_port> <gevent_port> [--no-reload]

set -euo pipefail

# ----- args -----
RELOAD=1
if [[ $# -lt 3 ]]; then
  echo "Usage: $0 <domain> <http_port> <gevent_port> [--no-reload]" >&2
  exit 1
fi

DOMAIN="$1"
HTTP_PORT="$2"
GEVENT_PORT="$3"
shift 3 || true
while [[ $# -gt 0 ]]; do
  case "$1" in
    --no-reload) RELOAD=0 ;;
    *) echo "Unknown option: $1" >&2; exit 1 ;;
  esac
  shift || true
done

if [[ ${EUID:-$(id -u)} -ne 0 ]]; then
  echo "This script must be run as root." >&2
  exit 1
fi

# ----- helpers -----
to_key() {
  # sanitize domain for upstream names/log files: [a-z0-9_]
  echo -n "$1" | tr '[:upper:]' '[:lower:]' | sed -E 's/[^a-z0-9]+/_/g; s/_+/_/g; s/^_+|_+$//g'
}

check_port_int() {
  [[ "$1" =~ ^[0-9]+$ ]] || { echo "Invalid port: $1" >&2; exit 1; }
  (( "$1" >= 1 && "$1" <= 65535 )) || { echo "Port out of range: $1" >&2; exit 1; }
}

# ----- validate -----
check_port_int "$HTTP_PORT"
check_port_int "$GEVENT_PORT"

KEY="$(to_key "$DOMAIN")"
SITES_AVAILABLE="/etc/nginx/sites-available"
SITES_ENABLED="/etc/nginx/sites-enabled"
CONF_PATH="${SITES_AVAILABLE}/${DOMAIN}.conf"
ACCESS_LOG="/var/log/nginx/${KEY}.access.log"
ERROR_LOG="/var/log/nginx/${KEY}.error.log"

# Ensure directories exist
mkdir -p "$SITES_AVAILABLE" "$SITES_ENABLED" /var/www/html

# Touch log files so nginx can open them on first start
touch "$ACCESS_LOG" "$ERROR_LOG"
chmod 0644 "$ACCESS_LOG" "$ERROR_LOG"

# ----- write config -----
cat > "$CONF_PATH" <<NGINX
# Auto-generated by odoo-nginx.sh
# Domain: ${DOMAIN}
# Backend ports: http=${HTTP_PORT}, gevent=${GEVENT_PORT}

# Upstreams (keep Odoo bound to localhost)
upstream ${KEY}_backend {
    server 127.0.0.1:${HTTP_PORT} fail_timeout=0;
    keepalive 32;
}
upstream ${KEY}_longpolling {
    server 127.0.0.1:${GEVENT_PORT} fail_timeout=0;
    keepalive 32;
}

server {
    listen 80;
    server_name ${DOMAIN};

    # Allow Certbot (webroot/nginx plugin) to validate later
    location ^~ /.well-known/acme-challenge/ {
        default_type "text/plain";
        root /var/www/html;
    }

    # General proxy settings
    proxy_read_timeout  720s;
    proxy_connect_timeout 60s;
    proxy_send_timeout  120s;
    client_max_body_size 64m;

    # Optional gzip (saves bandwidth)
    gzip on;
    gzip_types text/css text/less text/plain text/xml application/xml application/json application/javascript;

    # Access logs
    access_log ${ACCESS_LOG};
    error_log  ${ERROR_LOG};

    # Main Odoo app
    location / {
        proxy_set_header Host              \$host;
        proxy_set_header X-Forwarded-Host  \$host;
        proxy_set_header X-Forwarded-For   \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto http;   # still HTTP; put 'https' when behind TLS
        proxy_set_header X-Real-IP         \$remote_addr;

        proxy_redirect off;
        proxy_http_version 1.1;
        proxy_set_header Connection "";

        proxy_pass http://${KEY}_backend;
    }

    # Longpolling bus (live chat, notifications)
    location /longpolling {
        proxy_set_header Host              \$host;
        proxy_set_header X-Forwarded-Host  \$host;
        proxy_set_header X-Forwarded-For   \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto http;
        proxy_set_header X-Real-IP         \$remote_addr;

        proxy_redirect off;
        proxy_http_version 1.1;
        proxy_set_header Connection "";

        proxy_pass http://${KEY}_longpolling;
    }

    # (Optional) light caching for static assets
    location ~* /web/(css|js|img)/ {
        expires 30d;
        proxy_pass http://${KEY}_backend;
    }
}
NGINX

# ----- enable site -----
ln -sf "$CONF_PATH" "${SITES_ENABLED}/${DOMAIN}.conf"

# ----- test & reload -----
nginx -t

if [[ "$RELOAD" -eq 1 ]]; then
  systemctl reload nginx
  echo "Nginx reloaded. Config installed at: ${CONF_PATH}"
else
  echo "Config installed at: ${CONF_PATH} (reload skipped: --no-reload)"
fi
