#!/usr/bin/env bash
# odoo-nginx.sh â€” Create an Nginx server block for Odoo (reverse-proxy)
# Usage:
#   ./odoo-nginx.sh <domain> <http_port> <gevent_port> [--no-reload]
# Optional TLS:
#   --ssl-cert /path/fullchain.pem --ssl-key /path/privkey.pem
# Example:
#   ./odoo-nginx.sh sys.hamesha.ru 26802 24094 --ssl-cert /etc/letsencrypt/live/sys.hamesha.ru/fullchain.pem --ssl-key /etc/letsencrypt/live/sys.hamesha.ru/privkey.pem

set -euo pipefail

RELOAD=1
SSL_CERT=""
SSL_KEY=""

if [[ $# -lt 3 ]]; then
  echo "Usage: $0 <domain> <http_port> <gevent_port> [--no-reload] [--ssl-cert PATH --ssl-key PATH]" >&2
  exit 1
fi

DOMAIN="$1"; HTTP_PORT="$2"; GEVENT_PORT="$3"
shift 3 || true
while [[ $# -gt 0 ]]; do
  case "$1" in
    --no-reload) RELOAD=0 ;;
    --ssl-cert) shift; SSL_CERT="${1:-}";;
    --ssl-key)  shift; SSL_KEY="${1:-}";;
    *) echo "Unknown option: $1" >&2; exit 1 ;;
  esac
  shift || true
done

if [[ ${EUID:-$(id -u)} -ne 0 ]]; then
  echo "This script must be run as root." >&2
  exit 1
fi

to_key() { echo -n "$1" | tr '[:upper:]' '[:lower:]' | sed -E 's/[^a-z0-9]+/_/g; s/_+/_/g; s/^_+|_+$//g'; }
check_port_int() { [[ "$1" =~ ^[0-9]+$ ]] && (( "$1" >= 1 && "$1" <= 65535 )) || { echo "Invalid port: $1" >&2; exit 1; }; }

check_port_int "$HTTP_PORT"
check_port_int "$GEVENT_PORT"

KEY="$(to_key "$DOMAIN")"
SITES_AVAILABLE="/etc/nginx/sites-available"
SITES_ENABLED="/etc/nginx/sites-enabled"
CONF_PATH="${SITES_AVAILABLE}/${DOMAIN}.conf"
ACCESS_LOG="/var/log/nginx/${KEY}.access.log"
ERROR_LOG="/var/log/nginx/${KEY}.error.log"

mkdir -p "$SITES_AVAILABLE" "$SITES_ENABLED" /var/www/html
touch "$ACCESS_LOG" "$ERROR_LOG"
chmod 0644 "$ACCESS_LOG" "$ERROR_LOG"

# --- Common prelude (upstreams + map) ---
read -r -d '' PRELUDE <<NGX
# Auto-generated by odoo-nginx.sh
# Domain: ${DOMAIN}
# Backend ports: http=${HTTP_PORT}, gevent=${GEVENT_PORT}

# Upstreams (keep Odoo bound to localhost)
upstream ${KEY}_backend   { server 127.0.0.1:${HTTP_PORT} fail_timeout=0; keepalive 32; }
upstream ${KEY}_gevent    { server 127.0.0.1:${GEVENT_PORT} fail_timeout=0; keepalive 32; }

# WebSocket upgrade helper
map \$http_upgrade \$connection_upgrade { default upgrade; '' close; }
NGX

# --- HTTP server (port 80) ---
read -r -d '' HTTP_SERVER <<'NGX'
server {
    listen 80;
    server_name DOMAIN_HERE;

    # ACME
    location ^~ /.well-known/acme-challenge/ {
        default_type "text/plain";
        root /var/www/html;
    }

    # Global proxy/timeouts
    proxy_read_timeout  720s;
    proxy_connect_timeout 60s;
    proxy_send_timeout  120s;
    client_max_body_size 64m;

    gzip on;
    gzip_types text/css text/less text/plain text/xml application/xml application/json application/javascript;

    access_log ACCESS_LOG_HERE;
    error_log  ERROR_LOG_HERE;

    # Main Odoo HTTP
    location / {
        proxy_pass http://KEY_backend;
        proxy_http_version 1.1;
        proxy_set_header Host              $host;
        proxy_set_header X-Forwarded-Host  $host;
        proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto http;
        proxy_set_header X-Real-IP         $remote_addr;
        proxy_set_header Connection "";
        proxy_redirect off;
    }

    # WebSocket bus (Discuss/LiveChat)
    # Catch BOTH /websocket and /websocket/
    location ^~ /websocket {
        proxy_pass http://KEY_gevent;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_set_header Host              $host;
        proxy_set_header X-Forwarded-Host  $host;
        proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto http;
        proxy_read_timeout 86400s;
        proxy_send_timeout 86400s;
        proxy_buffering off;
    }

    # Static assets (optional)
    location ~* ^/web/(css|js|img)/ {
        expires 30d;
        proxy_pass http://KEY_backend;
    }
}
NGX

# --- HTTPS server (port 443), if cert+key provided ---
read -r -d '' TLS_SERVER <<'NGX'
server {
    listen 443 ssl;
    server_name DOMAIN_HERE;

    ssl_certificate     SSL_CERT_HERE;
    ssl_certificate_key SSL_KEY_HERE;

    # If you use Certbot's nginx defaults, you can include them:
    # include /etc/letsencrypt/options-ssl-nginx.conf;
    # ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

    # Global proxy/timeouts
    proxy_read_timeout  720s;
    proxy_connect_timeout 60s;
    proxy_send_timeout  120s;
    client_max_body_size 64m;

    gzip on;
    gzip_types text/css text/less text/plain text/xml application/xml application/json application/javascript;

    access_log ACCESS_LOG_HERE;
    error_log  ERROR_LOG_HERE;

    # Main Odoo HTTP (proxied)
    location / {
        proxy_pass http://KEY_backend;
        proxy_http_version 1.1;
        proxy_set_header Host              $host;
        proxy_set_header X-Forwarded-Host  $host;
        proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;   # IMPORTANT for wss://
        proxy_set_header X-Real-IP         $remote_addr;
        proxy_set_header Connection "";
        proxy_redirect off;
    }

    # WebSocket bus (Discuss/LiveChat)
    location ^~ /websocket {
        proxy_pass http://KEY_gevent;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_set_header Host              $host;
        proxy_set_header X-Forwarded-Host  $host;
        proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
        proxy_read_timeout 86400s;
        proxy_send_timeout 86400s;
        proxy_buffering off;
    }

    # Static assets (optional)
    location ~* ^/web/(css|js|img)/ {
        expires 30d;
        proxy_pass http://KEY_backend;
    }
}
NGX

# --- 80 -> 443 redirect server (keeps ACME reachable) ---
read -r -d '' REDIRECT_80_TO_443 <<'NGX'
server {
    listen 80;
    server_name DOMAIN_HERE;

    # ACME must remain reachable on :80
    location ^~ /.well-known/acme-challenge/ {
        default_type "text/plain";
        root /var/www/html;
    }

    location / {
        return 301 https://$host$request_uri;
    }
}
NGX

# Build final file
{
  echo "$PRELUDE"
  # If TLS is configured, emit redirect on :80 + full TLS server; else emit functional :80 server
  if [[ -n "$SSL_CERT" && -n "$SSL_KEY" ]]; then
    echo "${REDIRECT_80_TO_443//DOMAIN_HERE/$DOMAIN}"
    TMP_TLS="${TLS_SERVER//DOMAIN_HERE/$DOMAIN}"
    TMP_TLS="${TMP_TLS//SSL_CERT_HERE/$SSL_CERT}"
    TMP_TLS="${TMP_TLS//SSL_KEY_HERE/$SSL_KEY}"
    TMP_TLS="${TMP_TLS//ACCESS_LOG_HERE/$ACCESS_LOG}"
    TMP_TLS="${TMP_TLS//ERROR_LOG_HERE/$ERROR_LOG}"
    TMP_TLS="${TMP_TLS//KEY_backend/${KEY}_backend}"
    TMP_TLS="${TMP_TLS//KEY_gevent/${KEY}_gevent}"
    echo "$TMP_TLS"
  else
    TMP_HTTP="${HTTP_SERVER//DOMAIN_HERE/$DOMAIN}"
    TMP_HTTP="${TMP_HTTP//ACCESS_LOG_HERE/$ACCESS_LOG}"
    TMP_HTTP="${TMP_HTTP//ERROR_LOG_HERE/$ERROR_LOG}"
    TMP_HTTP="${TMP_HTTP//KEY_backend/${KEY}_backend}"
    TMP_HTTP="${TMP_HTTP//KEY_gevent/${KEY}_gevent}"
    echo "$TMP_HTTP"
  fi
} > "$CONF_PATH"

ln -sf "$CONF_PATH" "${SITES_ENABLED}/${DOMAIN}.conf"

nginx -t

if [[ "$RELOAD" -eq 1 ]]; then
  systemctl reload nginx
  echo "Nginx reloaded. Config installed at: ${CONF_PATH}"
else
  echo "Config installed at: ${CONF_PATH} (reload skipped: --no-reload)"
fi
