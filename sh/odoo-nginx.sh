#!/usr/bin/env bash
# odoo-nginx.sh — Create an Nginx server block for Odoo (reverse-proxy)
# Usage:
#   ./odoo-nginx.sh <domain> <http_port> <gevent_port> [--no-reload] [--enable-ssl --email <you@example.com>]
#
# Behavior:
# - Always creates HTTP vhost (port 80) with ACME path and working /websocket routing.
# - If --enable-ssl is provided, obtains a Let’s Encrypt cert via webroot, then:
#     * adds HTTPS vhost (443) and 80 -> 443 redirect (ACME on 80 still reachable)
# - Safe for repeated runs (idempotent-ish): it rewrites the site file and reloads Nginx.

set -euo pipefail

RELOAD=1
ENABLE_SSL=0
EMAIL=""

if [[ $# -lt 3 ]]; then
  echo "Usage: $0 <domain> <http_port> <gevent_port> [--no-reload] [--enable-ssl --email <you@example.com>]" >&2
  exit 1
fi

DOMAIN="$1"
HTTP_PORT="$2"
GEVENT_PORT="$3"
shift 3 || true
while [[ $# -gt 0 ]]; do
  case "$1" in
    --no-reload) RELOAD=0 ;;
    --enable-ssl) ENABLE_SSL=1 ;;
    --email) shift; EMAIL="${1:-}";;
    *) echo "Unknown option: $1" >&2; exit 1 ;;
  esac
  shift || true
done

if [[ ${EUID:-$(id -u)} -ne 0 ]]; then
  echo "This script must be run as root." >&2
  exit 1
fi

if (( ENABLE_SSL )) && [[ -z "$EMAIL" ]]; then
  echo "--enable-ssl requires --email <address>" >&2
  exit 1
fi

to_key() {
  echo -n "$1" | tr '[:upper:]' '[:lower:]' | sed -E 's/[^a-z0-9]+/_/g; s/_+/_/g; s/^_+|_+$//g'
}
check_port() {
  [[ "$1" =~ ^[0-9]+$ ]] && (( "$1" >= 1 && "$1" <= 65535 )) || { echo "Invalid port: $1" >&2; exit 1; }
}

check_port "$HTTP_PORT"
check_port "$GEVENT_PORT"

KEY="$(to_key "$DOMAIN")"
SITES_AVAILABLE="/etc/nginx/sites-available"
SITES_ENABLED="/etc/nginx/sites-enabled"
CONF_PATH="${SITES_AVAILABLE}/${DOMAIN}.conf"
ACCESS_LOG="/var/log/nginx/${KEY}.access.log"
ERROR_LOG="/var/log/nginx/${KEY}.error.log"
WEBROOT="/var/www/html"

mkdir -p "$SITES_AVAILABLE" "$SITES_ENABLED" "$WEBROOT"
touch "$ACCESS_LOG" "$ERROR_LOG"
chmod 0644 "$ACCESS_LOG" "$ERROR_LOG"

# --- Helpers to write sections ---
write_prelude() {
  cat <<NGX
# Auto-generated by odoo-nginx.sh
# Domain: ${DOMAIN}
# Backend ports: http=${HTTP_PORT}, gevent=${GEVENT_PORT}

# Upstreams (keep Odoo bound to localhost)
upstream ${KEY}_backend { server 127.0.0.1:${HTTP_PORT} fail_timeout=0; keepalive 32; }
upstream ${KEY}_gevent  { server 127.0.0.1:${GEVENT_PORT} fail_timeout=0; keepalive 32; }

# WebSocket upgrade helper
map \$http_upgrade \$connection_upgrade { default upgrade; '' close; }
NGX
}

write_http_server() {
  cat <<'NGX'
server {
    listen 80;
    server_name DOMAIN_HERE;

    # ACME (must be reachable on :80)
    location ^~ /.well-known/acme-challenge/ {
        default_type "text/plain";
        root WEBROOT_HERE;
    }

    # Global proxy/timeouts
    proxy_read_timeout  720s;
    proxy_connect_timeout 60s;
    proxy_send_timeout  120s;
    client_max_body_size 64m;

    # Optional gzip
    gzip on;
    gzip_types text/css text/less text/plain text/xml application/xml application/json application/javascript;

    access_log ACCESS_LOG_HERE;
    error_log  ERROR_LOG_HERE;

    # ---- Main Odoo HTTP ----
    location / {
        proxy_pass http://KEY_backend;
        proxy_http_version 1.1;
        proxy_set_header Host              $host;
        proxy_set_header X-Forwarded-Host  $host;
        proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto http;
        proxy_set_header X-Real-IP         $remote_addr;
        proxy_set_header Connection "";
        proxy_redirect off;
    }

    # ---- Realtime bus (WebSocket) ----
    # Catch BOTH /websocket and /websocket/
    location ^~ /websocket {
        proxy_pass http://KEY_gevent;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_set_header Host              $host;
        proxy_set_header X-Forwarded-Host  $host;
        proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto http;
        proxy_read_timeout 86400s;
        proxy_send_timeout 86400s;
        proxy_buffering off;
    }

    # ---- Static assets (optional) ----
    location ~* ^/web/(css|js|img)/ {
        expires 30d;
        proxy_pass http://KEY_backend;
    }
}
NGX
}

write_tls_server() {
  cat <<'NGX'
server {
    listen 443 ssl;
    server_name DOMAIN_HERE;

    ssl_certificate     /etc/letsencrypt/live/DOMAIN_HERE/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/DOMAIN_HERE/privkey.pem;
    # Optionally uncomment if present:
    # include /etc/letsencrypt/options-ssl-nginx.conf;
    # ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

    proxy_read_timeout  720s;
    proxy_connect_timeout 60s;
    proxy_send_timeout  120s;
    client_max_body_size 64m;

    gzip on;
    gzip_types text/css text/less text/plain text/xml application/xml application/json application/javascript;

    access_log ACCESS_LOG_HERE;
    error_log  ERROR_LOG_HERE;

    # ---- Main Odoo HTTP ----
    location / {
        proxy_pass http://KEY_backend;
        proxy_http_version 1.1;
        proxy_set_header Host              $host;
        proxy_set_header X-Forwarded-Host  $host;
        proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;   # IMPORTANT for wss://
        proxy_set_header X-Real-IP         $remote_addr;
        proxy_set_header Connection "";
        proxy_redirect off;
    }

    # ---- Realtime bus (WebSocket) ----
    location ^~ /websocket {
        proxy_pass http://KEY_gevent;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_set_header Host              $host;
        proxy_set_header X-Forwarded-Host  $host;
        proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy
