#!/usr/bin/env bash
# odoo-nginx.sh — Create an Nginx server block for Odoo (reverse-proxy)
# Usage: ./odoo-nginx.sh <domain> <http_port> <gevent_port> [--no-reload]

set -euo pipefail

RELOAD=1
if [[ $# -lt 3 ]]; then
  echo "Usage: $0 <domain> <http_port> <gevent_port> [--no-reload]" >&2
  exit 1
fi

DOMAIN="$1"
HTTP_PORT="$2"
GEVENT_PORT="$3"
shift 3 || true
while [[ $# -gt 0 ]]; do
  case "$1" in
    --no-reload) RELOAD=0 ;;
    *) echo "Unknown option: $1" >&2; exit 1 ;;
  esac
  shift || true
done

if [[ ${EUID:-$(id -u)} -ne 0 ]]; then
  echo "This script must be run as root." >&2
  exit 1
fi

# ----- helpers -----
to_key() {
  # sanitize domain for upstream names/log files: [a-z0-9_]
  echo -n "$1" | tr '[:upper:]' '[:lower:]' | sed -E 's/[^a-z0-9]+/_/g; s/_+/_/g; s/^_+|_+$//g'
}

check_port() {
  [[ "$1" =~ ^[0-9]+$ ]] && (( "$1" >= 1 && "$1" <= 65535 )) || {
    echo "Invalid port: $1" >&2; exit 1;
  }
}

check_port "$HTTP_PORT"
check_port "$GEVENT_PORT"

KEY="$(to_key "$DOMAIN")"
SITES_AVAILABLE="/etc/nginx/sites-available"
SITES_ENABLED="/etc/nginx/sites-enabled"
CONF_PATH="${SITES_AVAILABLE}/${DOMAIN}.conf"
ACCESS_LOG="/var/log/nginx/${KEY}.access.log"
ERROR_LOG="/var/log/nginx/${KEY}.error.log"

# Let’s Encrypt default paths (if present, we’ll emit TLS server)
LE_DIR="/etc/letsencrypt/live/${DOMAIN}"
SSL_CERT="${LE_DIR}/fullchain.pem"
SSL_KEY="${LE_DIR}/privkey.pem"
HAVE_TLS=0
if [[ -r "$SSL_CERT" && -r "$SSL_KEY" ]]; then
  HAVE_TLS=1
fi

# Ensure directories exist
mkdir -p "$SITES_AVAILABLE" "$SITES_ENABLED" /var/www/html
touch "$ACCESS_LOG" "$ERROR_LOG"
chmod 0644 "$ACCESS_LOG" "$ERROR_LOG"

# ----- write config -----
# NOTE: 'upstream' and 'map' are valid at http-context; site files are included there on Debian/Ubuntu.
cat > "$CONF_PATH" <<NGINX
# Auto-generated by odoo-nginx.sh
# Domain: ${DOMAIN}
# Backend ports: http=${HTTP_PORT}, gevent=${GEVENT_PORT}

# Upstreams (keep Odoo bound to localhost)
upstream ${KEY}_backend {
    server 127.0.0.1:${HTTP_PORT} fail_timeout=0;
    keepalive 32;
}
upstream ${KEY}_gevent {
    server 127.0.0.1:${GEVENT_PORT} fail_timeout=0;
    keepalive 32;
}

# WebSocket upgrade helper
map \$http_upgrade \$connection_upgrade { default upgrade; '' close; }
NGINX

if [[ "$HAVE_TLS" -eq 1 ]]; then
  # 80 -> 443 redirect (ACME path stays reachable)
  cat >> "$CONF_PATH" <<'NGINX'
server {
    listen 80;
    server_name DOMAIN_HERE;

    # ACME (keep reachable on :80)
    location ^~ /.well-known/acme-challenge/ {
        default_type "text/plain";
        root /var/www/html;
    }

    location / {
        return 301 https://$host$request_uri;
    }
}
NGINX
  sed -i "s/DOMAIN_HERE/${DOMAIN}/g" "$CONF_PATH"

  # TLS server
  cat >> "$CONF_PATH" <<'NGINX'
server {
    listen 443 ssl;
    server_name DOMAIN_HERE;

    ssl_certificate     SSL_CERT_HERE;
    ssl_certificate_key SSL_KEY_HERE;
    # If you have these, you can uncomment:
    # include /etc/letsencrypt/options-ssl-nginx.conf;
    # ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

    # Global proxy/timeouts
    proxy_read_timeout  720s;
    proxy_connect_timeout 60s;
    proxy_send_timeout  120s;
    client_max_body_size 64m;

    # Optional gzip
    gzip on;
    gzip_types text/css text/less text/plain text/xml application/xml application/json application/javascript;

    access_log ACCESS_LOG_HERE;
    error_log  ERROR_LOG_HERE;

    # ---- Main Odoo HTTP ----
    location / {
        proxy_pass http://KEY_backend;
        proxy_http_version 1.1;
        proxy_set_header Host              $host;
        proxy_set_header X-Forwarded-Host  $host;
        proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;   # IMPORTANT for wss://
        proxy_set_header X-Real-IP         $remote_addr;
        proxy_set_header Connection "";
        proxy_redirect off;
    }

    # ---- Realtime bus (WebSocket) ----
    # Catch BOTH /websocket and /websocket/ (avoid 301)
    location ^~ /websocket {
        proxy_pass http://KEY_gevent;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_set_header Host              $host;
        proxy_set_header X-Forwarded-Host  $host;
        proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
        proxy_read_timeout 86400s;
        proxy_send_timeout 86400s;
        proxy_buffering off;
    }

    # ---- Static assets (optional) ----
    location ~* ^/web/(css|js|img)/ {
        expires 30d;
        proxy_pass http://KEY_backend;
    }
}
NGINX

  sed -i "s/DOMAIN_HERE/${DOMAIN}/g" "$CONF_PATH"
  sed -i "s#SSL_CERT_HERE#${SSL_CERT//\//\\/}#g" "$CONF_PATH"
  sed -i "s#SSL_KEY_HERE#${SSL_KEY//\//\\/}#g" "$CONF_PATH"
  sed -i "s/ACCESS_LOG_HERE/$(echo "$ACCESS_LOG" | sed 's/\//\\\//g')/g" "$CONF_PATH"
  sed -i "s/ERROR_LOG_HERE/$(echo "$ERROR_LOG" | sed 's/\//\\\//g')/g" "$CONF_PATH"
  sed -i "s/KEY_backend/${KEY}_backend/g" "$CONF_PATH"
  sed -i "s/KEY_gevent/${KEY}_gevent/g" "$CONF_PATH"

else
  # HTTP-only server on :80
  cat >> "$CONF_PATH" <<'NGINX'
server {
    listen 80;
    server_name DOMAIN_HERE;

    # ACME
    location ^~ /.well-known/acme-challenge/ {
        default_type "text/plain";
        root /var/www/html;
    }

    # Global proxy/timeouts
    proxy_read_timeout  720s;
    proxy_connect_timeout 60s;
    proxy_send_timeout  120s;
    client_max_body_size 64m;

    # Optional gzip
    gzip on;
    gzip_types text/css text/less text/plain text/xml application/xml application/json application/javascript;

    access_log ACCESS_LOG_HERE;
    error_log  ERROR_LOG_HERE;

    # ---- Main Odoo HTTP ----
    location / {
        proxy_pass http://KEY_backend;
        proxy_http_version 1.1;
        proxy_set_header Host              $host;
        proxy_set_header X-Forwarded-Host  $host;
        proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto http;
        proxy_set_header X-Real-IP         $remote_addr;
        proxy_set_header Connection "";
        proxy_redirect off;
    }

    # ---- Realtime bus (WebSocket) ----
    # Catch BOTH /websocket and /websocket/
    location ^~ /websocket {
        proxy_pass http://KEY_gevent;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_set_header Host              $host;
        proxy_set_header X-Forwarded-Host  $host;
        proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto http;
        proxy_read_timeout 86400s;
        proxy_send_timeout 86400s;
        proxy_buffering off;
    }

    # ---- Static assets (optional) ----
    location ~* ^/web/(css|js|img)/ {
        expires 30d;
        proxy_pass http://KEY_backend;
    }
}
NGINX

  sed -i "s/DOMAIN_HERE/${DOMAIN}/g" "$CONF_PATH"
  sed -i "s/ACCESS_LOG_HERE/$(echo "$ACCESS_LOG" | sed 's/\//\\\//g')/g" "$CONF_PATH"
  sed -i "s/ERROR_LOG_HERE/$(echo "$ERROR_LOG" | sed 's/\//\\\//g')/g" "$CONF_PATH"
  sed -i "s/KEY_backend/${KEY}_backend/g" "$CONF_PATH"
  sed -i "s/KEY_gevent/${KEY}_gevent/g" "$CONF_PATH"
fi

# ----- enable site -----
ln -sf "$CONF_PATH" "${SITES_ENABLED}/${DOMAIN}.conf"

# ----- test & reload -----
nginx -t

if [[ "$RELOAD" -eq 1 ]]; then
  systemctl reload nginx
  echo "Nginx reloaded. Config installed at: ${CONF_PATH}"
else
  echo "Config installed at: ${CONF_PATH} (reload skipped: --no-reload)"
fi
